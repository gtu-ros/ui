import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { JointStatesListener } from '../services/RosService';
import { Divider, Grid, IconButton, Slider } from '@material-ui/core';
import AddCircleIcon from '@material-ui/icons/AddCircle';
import RemoveCircleIcon from '@material-ui/icons/RemoveCircle';

export const JointStates = (props) => {
  const float_precision = 3;

  const [jointStatesListener, setJointStatesListener] = useState(null);
  const [jointStates, setJointStates] = useState(null);

  const jointStatesCallback = (message) => {
    setJointStates({
      name: message.name,
      position: message.position,
      effort: message.effort,
      velocity: message.velocity,
      frame_id: message.header.frame_id
    });
  };

  useEffect(() => {
    setJointStatesListener(
      { jointStatesListener: JointStatesListener(props.topic) },
      () => jointStatesListener.subscribe(jointStatesCallback)
    );

    // return () => jointStatesListener.unsubscribe();
  }, [jointStates]);

  const classes = {
    table: {
      minWidth: 350
    }
  };

  const rows = [];

  if (jointStates) {
    for (let i = 0; i < jointStates.name.length; ++i) {
      rows.push({
        name: jointStates.name[i],
        position: jointStates.position[i]
      });
    }
  }

  return (
    <div>
      {jointStates ? (
        <>
          <Grid container spacing={3}>
            {rows.map((value, index) => {
              return (
                <>
                  <Grid xs={4}>{value.name}</Grid>
                  <Grid xs={2}>{value.position.toFixed(float_precision)}</Grid>
                  <Grid xs={4}>
                    <Slider
                      value={value.position.toFixed(float_precision)}
                      valueLabelDisplay="auto"
                      step={0.1}
                      marks
                      min={-2}
                      max={2}
                    />
                  </Grid>
                  <Grid xs={2}>
                    <IconButton color="secondary" size="small">
                      <RemoveCircleIcon />
                    </IconButton>
                    <IconButton color="primary" size="small">
                      <AddCircleIcon />
                    </IconButton>
                  </Grid>
                  <Divider />
                </>
              );
            })}
          </Grid>
        </>
      ) : null}
    </div>
  );
};

JointStates.propTypes = {
  topic: PropTypes.string.isRequired
};
